#include <cassert>
#include <getopt.h>
#include <limits.h>
#include <signal.h>
//#include "cpucounters.h"
#include <sys/time.h>
#include <cmath>
#include "zipfian_util.h"
#include "zipfian.h"
#include <sys/mman.h>
#include <fcntl.h>
#include "fptree.h"
#include <stdlib.h>
#include <stdio.h>
#include <algorithm>
#include <vector>
//#include <thread>
//#include <pthread>


#define DEFAULT_DURATION                10000
#define DEFAULT_INITIAL                 256
#define DEFAULT_NB_THREADS              1
#define DEFAULT_RANGE                   0x7FFFFFFF
#define DEFAULT_SEED                    0
#define DEFAULT_UPDATE                  20
#define DEFAULT_ALTERNATE               0
#define DEFAULT_EFFECTIVE               1 
#define DEFAULT_UNBALANCED              0

#define XSTR(s)                         STR(s)
#define STR(s)                          #s

#define VAL_MIN                         INT_MIN
#define VAL_MAX                         INT_MAX
#define DETECT_INSERT
//#define UNIFORM
#define test_num 50000000
#define test_thread 1


inline long rand_range(long r); /* declared in test.c */

volatile AO_t stop;
unsigned int global_seed;

unsigned int levelmax;
int initial;
char * thread_space_start_addr;
__thread char * start_addr;
__thread char * curr_addr;
char *pm_start_addr;
uint64_t records[50000000] = { 0 };
uint64_t record[test_thread][test_num] = { 0 };
uint64_t latency, insert_nb[test_thread] = { 0 }, insert_nbs = 0;
__thread struct timespec T1[test_thread], T2[test_thread];
__thread PMEMobjpool *pop;
cpu_set_t cpuset[2];

long splitnum = 0;
long sfencenum = 0;
long clwbnum = 0;
std::vector<uint64_t> buffer;
std::vector<uint64_t> sbuffer;
std::vector<long> slen;
std::vector<char> ops;

void bindCPU() {
  CPU_ZERO(&cpuset[0]);
  CPU_ZERO(&cpuset[1]);
  for (int j = 0; j < 18; j++) {
    CPU_SET(j, &cpuset[0]);
    CPU_SET(j + 18, &cpuset[1]);
  }
}

typedef struct barrier {
    pthread_cond_t complete;
    pthread_mutex_t mutex;
    int count;
    int crossing;
} barrier_t;

void barrier_init(barrier_t *b, int n)
{
    pthread_cond_init(&b->complete, NULL);
    pthread_mutex_init(&b->mutex, NULL);
    b->count = n;
    b->crossing = 0;
}

void barrier_cross(barrier_t *b)
{
    pthread_mutex_lock(&b->mutex);
    /* One more thread through */
    b->crossing++;
    /* If not all here, wait */
    if (b->crossing < b->count) {
        pthread_cond_wait(&b->complete, &b->mutex);
    } else {
        pthread_cond_broadcast(&b->complete);
        /* Reset for next time */
        b->crossing = 0;
    }
    pthread_mutex_unlock(&b->mutex);
}

int floor_log_2(unsigned int n) {
  int pos = 0;
  if (n >= 1<<16) { n >>= 16; pos += 16; }
  if (n >= 1<< 8) { n >>=  8; pos +=  8; }
  if (n >= 1<< 4) { n >>=  4; pos +=  4; }
  if (n >= 1<< 2) { n >>=  2; pos +=  2; }
  if (n >= 1<< 1) {           pos +=  1; }
  return ((n == 0) ? (-1) : pos);
}

/* 
 * Returns a pseudo-random value in [1;range).
 * Depending on the symbolic constant RAND_MAX>=32767 defined in stdlib.h,
 * the granularity of rand() could be lower-bounded by the 32767^th which might 
 * be too high for given values of range and initial.
 *
 * Note: this is not thread-safe and will introduce futex locks
 */
inline long rand_range(long r) {
    int m = RAND_MAX;
    int d, v = 0;
    
    do {
        d = (m > r ? r : m);		
        v += 1 + (int)(d * ((double)rand()/((double)(m)+1.0)));
        r -= m;
    } while (r > 0);
    return v;
}
long rand_range(long r);

bool simulate_conflict = false;
long max_range = 0;

/* Thread-safe, re-entrant version of rand_range(r) */
inline long rand_range_re(unsigned int *seed, long r) {
    int m = RAND_MAX;
    int d, v = 0;
    
    do {
        d = (m > r ? r : m);		
        v += 1 + (int)(d * ((double)rand_r(seed)/((double)(m)+1.0)));
        r -= m;
    } while (r > 0);

#ifndef UNIFORM
    v = v % max_range;
#endif
    return v;
}
long rand_range_re(unsigned int *seed, long r);

void read_data_from_file(char* file)
{
    long count = 0;

    FILE* fp = fopen(file, "r");
    if (fp == NULL) {
        exit(-1);
    }
    buffer.clear();

    printf("reading\n");
    while (1) {
        unsigned long long key;
        count = fscanf(fp, "%ld\n", &key);
        if (count != 1) {
            break;
        }
        buffer.push_back(key);
    }
    fclose(fp);
    printf("file closed\n");
}

void scan_data_from_file(char* file)
{
    long count = 0;

    FILE* fp = fopen(file, "r");
    if (fp == NULL) {
        exit(-1);
    }
    buffer.clear();
    ops.clear();
    printf("reading\n");
    while (1) {
        char str[100];
        char* p;
        count = fscanf(fp, "%s\n", str);
        if (count != 1) {
            break;
        }
        p = strtok(str, ",");
        buffer.push_back(atoll(p));
        p = strtok(NULL, ",");
        ops.push_back(p[0]);
    }
    fclose(fp);
    printf("file closed\n");
}

void sd_data_from_file(char* file)
{
    long count = 0;

    FILE* fp = fopen(file, "r");
    if (fp == NULL) {
        exit(-1);
    }
    buffer.clear();
    slen.clear();
    printf("reading\n");
    while (1) {
        char str[100];
        char* p;
        count = fscanf(fp, "%s\n", str);
        if (count != 1) {
            break;
        }
        p = strtok(str, ",");
        buffer.push_back(atoll(p));
        p = strtok(NULL, ",");
        slen.push_back(atol(p));
    }
    fclose(fp);
    printf("file closed\n");
}


typedef struct thread_data {
    int           id;
    unsigned int  first;
    long          range;
    int           update;
    int           alternate;
    int           effective;
    unsigned long nb_add;
    unsigned long nb_added;
    unsigned long nb_remove;
    unsigned long nb_removed;
    unsigned long nb_contains;
    unsigned long nb_found;
    unsigned long nb_aborts;
    unsigned long nb_aborts_locked_read;
    unsigned long nb_aborts_locked_write;
    unsigned long nb_aborts_validate_read;
    unsigned long nb_aborts_validate_write;
    unsigned long nb_aborts_validate_commit;
    unsigned long nb_aborts_invalid_memory;
    unsigned long nb_aborts_double_write;
    unsigned long max_retries;
    unsigned int  seed;
    fptree_t      *set;
    barrier_t     *barrier;
    unsigned long failures_because_contention;
    char * start_addr;
    int affinityNodeID;
    uint64_t pad[16];
} thread_data_t;

int global_id;
void catcher(int sig)
{
    printf("CAUGHT SIGNAL %d\n", sig);
}

int main(int argc, char **argv)
{
    char loading_file[100];
    sprintf(loading_file, "%s", "/root/HXY/ubtree/datafile/loadb.csv");
    read_data_from_file(loading_file);
    char mainpath[100] = "/mnt/ext4/fastfair/fptree_pool";
    openPmemobjPool(mainpath);
    fptree_t* set = fptree_create();
    initial = buffer.size();
    struct timeval start_time, end_time;
    uint64_t       time_interval;
    int  worker_thread_num = test_thread;
    int keys_per_thread = test_num;
    std::thread threads[128];

    //	 gettimeofday(&start_time, NULL);
    for (int kt = 0; kt < 1; kt++) {
        threads[kt] = std::thread([=]() {
            int start = 0;
            int end = 50000000;
            for (int ii = start; ii < end; ii++) {
                uint64_t kk = buffer[ii];
                //printf("%lld\n",kk);
                fptree_put(set, kk, (char*)kk);
            }
            });
    }
    for (int t = 0; t < 1; t++) threads[t].join();
    //  gettimeofday(&end_time, NULL);

       /*
      time_interval = 1000000 * (end_time.tv_sec - start_time.tv_sec) + end_time.tv_usec - start_time.tv_usec;
      printf("delete time_interval = %lu ns\n", time_interval * 1000);
      printf("average delete op = %lu ns\n",    time_interval * 1000 / 50000000);

  printf("load is end\n");
  */
  //buffer.clear();
  /*
  printf("load time is clwb is %lld\n",clwbnum);
  printf("load time is sfence is %lld\n",sfencenum);
  printf("load time is splitnum is %lld\n",splitnum);

  clwbnum=0;sfencenum=0;splitnum=0;
  */
  //BigBatch_0
    sprintf(loading_file, "%s", "/root/HXY/ubtree/datafile/read50m.csv");
    read_data_from_file(loading_file);
    //scan_data_from_file(loading_file);
   //sd_data_from_file(loading_file);
   //pcm::PCM * m = pcm::PCM::getInstance();
   //auto status = m->program();
    gettimeofday(&start_time, NULL);
    //pcm::SystemCounterState before_sstate = pcm::getSystemCounterState();
    for (int kt = 0; kt < worker_thread_num; kt++) {
        threads[kt] = std::thread([=]() {
            int start = keys_per_thread * kt;
            int end = start + keys_per_thread;
            for (int ii = start; ii < end; ii++) {
                uint64_t kk = buffer[ii];
                //char op= ops[ii];
                char op = 'r';
                //printf("%lld\n",kk);
                uint64_t endk;
                long lend;

                //endk=MAX_KEY;
                //lend=slen[ii];
     //if(lend > 0){op='s';}
     //else{op='i';}

                switch (op)
                {
                case 'r':

                    //clock_gettime(CLOCK_MONOTONIC, &T1[kt]);
                    bt->btree_search(kk);
                    //clock_gettime(CLOCK_MONOTONIC, &T2[kt]);
                    //latency = ((T2[kt].tv_sec - T1[kt].tv_sec) * 1000000000 + (T2[kt].tv_nsec - T1[kt].tv_nsec)) / 100;
                    //record[kt][latency] += 1;
                    //insert_nb[kt] += 1;
    /*
    clock_gettime(CLOCK_MONOTONIC, &T1);
    bt->btree_search(kk);
    clock_gettime(CLOCK_MONOTONIC, &T2);
                    latency = ((T2.tv_sec - T1.tv_sec) * 1000000000 + (T2.tv_nsec - T1.tv_nsec)) / 100;
                    records[latency] += 1;
                    insert_nbs += 1;
    */
                    break;
                case 'i':

                    //clock_gettime(CLOCK_MONOTONIC, &T1[kt]);
                    fptree_put(set, kk, (char*)kk);
                    //clock_gettime(CLOCK_MONOTONIC, &T2[kt]);
                                    //latency = ((T2[kt].tv_sec - T1[kt].tv_sec) * 1000000000 + (T2[kt].tv_nsec - T1[kt].tv_nsec)) / 100;
                                    //record[kt][latency] += 1;
                                    //insert_nb[kt] += 1;
                    /*

                                    clock_gettime(CLOCK_MONOTONIC, &T1);
                    fptree_put(set,kk, (char*) kk);
                                    clock_gettime(CLOCK_MONOTONIC, &T2);
                                    latency = ((T2.tv_sec - T1.tv_sec) * 1000000000 + (T2.tv_nsec - T1.tv_nsec)) / 100;
                                    records[latency] += 1;
                                    insert_nbs += 1;
                                    */

                    break;
                case 'd':

                    clock_gettime(CLOCK_MONOTONIC, &T1[kt]);
                    fptree_del(set, kk);
                    clock_gettime(CLOCK_MONOTONIC, &T2[kt]);
                    latency = ((T2[kt].tv_sec - T1[kt].tv_sec) * 1000000000 + (T2[kt].tv_nsec - T1[kt].tv_nsec)) / 100;
                    record[kt][latency] += 1;
                    insert_nb[kt] += 1;
                    /*

                                    clock_gettime(CLOCK_MONOTONIC, &T1);
                    fptree_del(set,kk);
                                    clock_gettime(CLOCK_MONOTONIC, &T2);
                                    latency = ((T2.tv_sec - T1.tv_sec) * 1000000000 + (T2.tv_nsec - T1.tv_nsec)) / 100;
                                    records[latency] += 1;
                                    insert_nbs += 1;
                                    */

                    break;
                case 's':
                    /*
                    clock_gettime(CLOCK_MONOTONIC, &T1[kt]);
                    bt->btree_search_range(kk, endk, lend);
                    clock_gettime(CLOCK_MONOTONIC, &T2[kt]);
                    latency = ((T2[kt].tv_sec - T1[kt].tv_sec) * 1000000000 + (T2[kt].tv_nsec - T1[kt].tv_nsec)) / 100;
                    record[kt][latency] += 1;
                    insert_nb[kt] += 1;
                    */
                    /*

                                    clock_gettime(CLOCK_MONOTONIC, &T1);
                    bt->btree_search_range(kk, endk, lend);
                                    clock_gettime(CLOCK_MONOTONIC, &T2);
                                    latency = ((T2.tv_sec - T1.tv_sec) * 1000000000 + (T2.tv_nsec - T1.tv_nsec)) / 100;
                                    records[latency] += 1;
                                    insert_nbs += 1;
                    */
                    break;
                default:
                    printf("error\n");
                    break;
                }
            }
            });
    }
    for (int t = 0; t < worker_thread_num; t++) threads[t].join();
    //pcm::SystemCounterState after_sstate = pcm::getSystemCounterState();
    gettimeofday(&end_time, NULL);
    /*
      printf("L3 misses: %lld\n",pcm::getL3CacheMisses(before_sstate, after_sstate));
      printf("DRAM Reads (bytes): %lld\n",pcm::getBytesReadFromMC(before_sstate, after_sstate));
      printf("DRAM Writes (bytes): %lld\n",pcm::getBytesWrittenToMC(before_sstate, after_sstate));
      printf("PM Reads (bytes): %lld\n",pcm::getBytesReadFromPMM(before_sstate, after_sstate));
      printf("PM Writes (bytes): %lld\n",pcm::getBytesWrittenToPMM(before_sstate, after_sstate));
  */

    time_interval = 1000000 * (end_time.tv_sec - start_time.tv_sec) + end_time.tv_usec - start_time.tv_usec;
    printf("delete time_interval = %lu ns\n", time_interval * 1000);
    printf("average delete op = %lu ns\n", time_interval * 1000 / buffer.size());

    printf("load time is clwb is %lld\n", clwbnum);
    printf("load time is sfence is %lld\n", sfencenum);
    printf("load time is splitnum is %lld\n", splitnum);
    printf("the level is %lld\n", bt->level());


    for (int ik = 0; ik < test_thread; ik++)
    {
        for (int jf = 0; jf < test_num; jf++)
        {
            if (ik == 0 && record[ik][jf] != 0)
            {
                records[jf] = record[ik][jf];
            }
            if (ik > 0)
            {
                if (record[ik][jf] != 0 && records[jf] == 0) { records[jf] = record[ik][jf]; }
                if (record[ik][jf] != 0 && records[jf] != 0) { records[jf] = records[jf] + record[ik][jf]; }
            }
        }
        insert_nbs = insert_nb[ik] + insert_nbs;
    }


    uint64_t cnt = 0;
    uint64_t nb_min = insert_nbs * 0.1;
    uint64_t nb_50 = insert_nbs / 2;
    uint64_t nb_90 = insert_nbs * 0.9;
    uint64_t nb_99 = insert_nbs * 0.99;
    uint64_t nb_999 = insert_nbs * 0.999;
    uint64_t nb_9999 = insert_nbs * 0.9999;
    bool flag_50 = false, flag_90 = false, flag_99 = false, flag_min = false, flag_999 = false, flag_9999 = false;
    double latency_50, latency_90, latency_99, latency_min, latency_999, latency_9999;
    for (int i = 0; i < 50000000 && !(flag_min && flag_50 && flag_90 && flag_99 && flag_999 && flag_9999); i++) {
        cnt += records[i];
        if (!flag_min && cnt >= nb_min) {
            latency_min = (double)i / 10.0;
            flag_min = true;
        }
        if (!flag_50 && cnt >= nb_50) {
            latency_50 = (double)i / 10.0;
            flag_50 = true;
        }
        if (!flag_90 && cnt >= nb_90) {
            latency_90 = (double)i / 10.0;
            flag_90 = true;
        }
        if (!flag_99 && cnt >= nb_99) {
            latency_99 = (double)i / 10.0;
            flag_99 = true;
        }
        if (!flag_999 && cnt >= nb_999) {
            latency_999 = (double)i / 10.0;
            flag_999 = true;
        }
        if (!flag_9999 && cnt >= nb_9999) {
            latency_9999 = (double)i / 10.0;
            flag_9999 = true;
        }
    }
    printf("min latency is %.1lfus\nmedium latency is %.1lfus\n90%% latency is %.1lfus\n99%% latency is %.1lfus\n99.9%% latency is %.1lfus\n99.99%% latency is %.1lfus\n", latency_min, latency_50, latency_90, latency_99, latency_999, latency_9999);

    return 0;
}


